{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenAPI definition",
    "version": "v0"
  },
  "paths": {
    "/groups/{id}": {
      "get": {
        "tags": [
          "group-controller"
        ],
        "summary": "Get all the group of the user",
        "operationId": "getUserGroups",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "Return the list of groups the user is in",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/auth/{id}/password": {
      "patch": {
        "tags": [
          "auth-controller"
        ],
        "summary": "Used to update the password",
        "operationId": "updatePassword",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "If the old password is not valid",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "If the password has been updated"
          }
        }
      }
    },
    "/profiles/profiles/exists/{profileId}": {
      "get": {
        "tags": [
          "profile-controller"
        ],
        "summary": "Check if a profile exists",
        "operationId": "checkExists",
        "parameters": [
          {
            "name": "profileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanResponse"
                }
              }
            }
          }
        }
      }
    },
    "/profiles/profiles/": {
      "get": {
        "tags": [
          "profile-controller"
        ],
        "summary": "Get all profiles from a user",
        "operationId": "getUserProfiles",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of profiles",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProfileModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "If the answers are not valid",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProfileModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reports/reports/{id}": {
      "get": {
        "tags": [
          "report-controller"
        ],
        "summary": "Get all the report posted by a user",
        "operationId": "getBySubmitterId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportResponse"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "report-controller"
        ],
        "summary": "Update a report",
        "operationId": "updateReport",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "The report does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          },
          "200": {
            "description": "The report has been updated",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/info/{id}": {
      "get": {
        "tags": [
          "group-controller"
        ],
        "summary": "Get info about a group",
        "operationId": "getInfo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInfoModel"
                }
              }
            }
          }
        }
      }
    },
    "/expenses/scan": {
      "post": {
        "tags": [
          "scan-controller"
        ],
        "operationId": "scan",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScanRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ScanResponse"
                }
              }
            }
          }
        }
      }
    },
    "/expenses/expenses/{group}/purchaser/{user}": {
      "post": {
        "tags": [
          "expense-controller"
        ],
        "operationId": "createExpense",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "user",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpenseRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseModel"
                }
              }
            }
          }
        }
      }
    },
    "/groups/private/": {
      "post": {
        "tags": [
          "group-controller"
        ],
        "summary": "Create a private group",
        "operationId": "createPrivateGroup",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePrivateGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "User or Group does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "Returns the created group",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/private/{group}/user": {
      "post": {
        "tags": [
          "group-controller"
        ],
        "summary": "Add user to private group",
        "operationId": "inviteUserInPrivateGroup",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "username",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelWithEmail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "The client is not the owner of the group",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Group or User does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "The user is added to the group"
          }
        }
      }
    },
    "/chat/surveys/channel/{id}": {
      "get": {
        "tags": [
          "survey-controller"
        ],
        "summary": "Get all the surveys in a channel",
        "operationId": "getSurveysByChannelId",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The data have been successfully retrieved",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SurveyModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/users/{id}/admin": {
      "delete": {
        "tags": [
          "user-controller"
        ],
        "operationId": "deleteUserByAdmin",
        "parameters": [
          {
            "name": "role",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteUserByAdminRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/expenses/expenses/{groupId}/{expenseId}/purchaser/{user}": {
      "put": {
        "tags": [
          "expense-controller"
        ],
        "operationId": "updateExpense",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "expenseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "user",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpenseRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseModel"
                }
              }
            }
          }
        }
      }
    },
    "/users/auth/{id}/resend": {
      "post": {
        "tags": [
          "auth-controller"
        ],
        "summary": "Will send a new confirmation code to the user",
        "operationId": "resendConfirmationCode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "The user is already confirmed",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "A new confirmation code has been sent"
          }
        }
      }
    },
    "/chat/surveys/vote/{id}": {
      "post": {
        "tags": [
          "survey-controller"
        ],
        "summary": "Vote for a survey",
        "operationId": "submitVote",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoteSurveyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The vote has been submitted",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SurveyModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "survey-controller"
        ],
        "summary": "Deletes a vote for a survey",
        "operationId": "deleteVote",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The vote has been submitted"
          }
        }
      }
    },
    "/groups/": {
      "post": {
        "tags": [
          "group-controller"
        ],
        "operationId": "createPublicGroup",
        "parameters": [
          {
            "name": "roles",
            "in": "header",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePublicGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{group}/join/": {
      "patch": {
        "tags": [
          "group-controller"
        ],
        "summary": "Accept the invitation to the group",
        "operationId": "joinGroup",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Group or User does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "The user has joined the group"
          }
        }
      }
    },
    "/users/auth/register/admin": {
      "post": {
        "tags": [
          "auth-controller"
        ],
        "summary": "Create a new admin account. Will send a confirmation mail to the given address",
        "operationId": "createAdminAccount",
        "parameters": [
          {
            "name": "roles",
            "in": "header",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "If the email is already in use by another user",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "Admin is created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          }
        }
      }
    },
    "/groups/private/{group}/qrcode": {
      "get": {
        "tags": [
          "group-controller"
        ],
        "summary": "Get the QR code to join a private group",
        "operationId": "getQRCode",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "Returns the encoded qr code",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/users": {
      "get": {
        "tags": [
          "user-controller"
        ],
        "operationId": "getAll",
        "parameters": [
          {
            "name": "roles",
            "in": "header",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/private/{group}/user/{id}": {
      "delete": {
        "tags": [
          "group-controller"
        ],
        "summary": "Remove user from private group",
        "operationId": "removeUserFromPrivateGroup",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "username",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "The client is not the owner of the group",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Group or User does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "The user is removed"
          }
        }
      }
    },
    "/profiles/profiles/group/{groupId}": {
      "post": {
        "tags": [
          "profile-controller"
        ],
        "summary": "Create a group profile",
        "operationId": "createGroupProfile",
        "parameters": [
          {
            "name": "roles",
            "in": "header",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileCreationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the profile",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileModel"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileModel"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/notifications/{id}": {
      "delete": {
        "tags": [
          "notification-controller"
        ],
        "operationId": "discard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/reports/reports/{id}/admin": {
      "delete": {
        "tags": [
          "report-controller"
        ],
        "summary": "Delete a report",
        "operationId": "deleteReportAdmin",
        "parameters": [
          {
            "name": "roles",
            "in": "header",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "The report does not exist"
          },
          "200": {
            "description": "The report has been deleted"
          }
        }
      }
    },
    "/reports/reports": {
      "post": {
        "tags": [
          "report-controller"
        ],
        "summary": "Create a report",
        "operationId": "submitReport",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitReportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The report has been created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          },
          "422": {
            "description": "The submitter or reported user do not exist",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/chat/channels/{id}": {
      "delete": {
        "tags": [
          "channel-controller"
        ],
        "summary": "Delete a channel",
        "operationId": "deleteChannel",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The channel has been deleted"
          },
          "422": {
            "description": "The channel does not exist"
          }
        }
      },
      "patch": {
        "tags": [
          "channel-controller"
        ],
        "summary": "Update a channel",
        "operationId": "updateChannel",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateChannelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The channel has been updated"
          },
          "422": {
            "description": "The channel does not exist"
          },
          "403": {
            "description": "The client  don't have access to this channel"
          }
        }
      }
    },
    "/groups/{group}/decline/": {
      "patch": {
        "tags": [
          "group-controller"
        ],
        "summary": "Decline the invitation to the group",
        "operationId": "declineGroupInvite",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Group or User does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "The user has declined the invite"
          }
        }
      }
    },
    "/groups/invites/{id}": {
      "get": {
        "tags": [
          "group-controller"
        ],
        "summary": "Get all the group invitation of the user",
        "operationId": "getUserInvites",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "Return the list of groups the user is invited to",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/expenses/expenses/{group}/user/{user}/debts/details": {
      "get": {
        "tags": [
          "expense-controller"
        ],
        "operationId": "getUserDebtsDetails",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "user",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DebtDetailsResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/{group}": {
      "patch": {
        "tags": [
          "group-controller"
        ],
        "summary": "Update the public group",
        "operationId": "updatePublicGroup",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePublicGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Group does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "The group is updated"
          }
        }
      }
    },
    "/notifications/notifications/": {
      "get": {
        "tags": [
          "notification-controller"
        ],
        "operationId": "getForUser",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/users/": {
      "delete": {
        "tags": [
          "user-controller"
        ],
        "operationId": "deleteUserAccount",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/groups/open": {
      "get": {
        "tags": [
          "group-controller"
        ],
        "summary": "Get all open groups",
        "operationId": "getOpenGroups",
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "Return the list of open groups",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/planning/groups/{groupId}/planning/{activityId}/join": {
      "patch": {
        "tags": [
          "planning-controller"
        ],
        "summary": "Add the user to the given activity",
        "operationId": "joinActivity",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "The activity or group does not exist"
          },
          "204": {
            "description": "User added"
          },
          "403": {
            "description": "User does not belong to the group"
          }
        }
      }
    },
    "/reports/recommendations/{id}": {
      "get": {
        "tags": [
          "recommendation-controller"
        ],
        "summary": "Get all the recommendation of a user",
        "operationId": "getByReviewedUserId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RecommendationResponse"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "recommendation-controller"
        ],
        "summary": "Delete a recommendation",
        "operationId": "deleteRecommendation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The recommendation has been deleted"
          },
          "404": {
            "description": "The recommendation does not exist"
          }
        }
      }
    },
    "/users/users/me": {
      "get": {
        "tags": [
          "user-controller"
        ],
        "operationId": "getCurrentUser",
        "parameters": [
          {
            "name": "username",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/private/{group}": {
      "delete": {
        "tags": [
          "group-controller"
        ],
        "summary": "Delete the private group",
        "operationId": "deletePrivateGroup",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "username",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "The client is not the owner of the group",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Group or User does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "The group is deleted"
          }
        }
      },
      "patch": {
        "tags": [
          "group-controller"
        ],
        "summary": "Update the private group",
        "operationId": "updatePrivateGroup",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "username",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePrivateGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "The client is not the owner of the group",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Group or User does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "The group is updated"
          }
        }
      }
    },
    "/groups/{group}/user/": {
      "delete": {
        "tags": [
          "group-controller"
        ],
        "summary": "Remove the user from a group",
        "operationId": "leaveGroup",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Group or User does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "The user has left the group"
          }
        }
      }
    },
    "/places/categories": {
      "get": {
        "tags": [
          "places-controller"
        ],
        "summary": "Returns all the categories of locations",
        "operationId": "getCategories",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "ANTIQUES_SHOP",
                      "ARTS_CENTER",
                      "ART_SHOP",
                      "BAR_AND_PUB",
                      "BEACH",
                      "BUS",
                      "CHANGE",
                      "CHINESE_RESTAURANT",
                      "COFFEE_SHOP",
                      "ENTERTAINMENT",
                      "FAST_FOOD",
                      "FISH_AND_CHIPS_RESTAURANT",
                      "ITALIAN_RESTAURANT",
                      "MUSEUM",
                      "PARKING",
                      "RESTAURANT",
                      "SEAFOOD_RESTAURANT",
                      "SUPERMARKET",
                      "SWIMMING_POOL",
                      "SUBWAY",
                      "THEATRE",
                      "TOURISM",
                      "TRANSPORT"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/isInGroup": {
      "get": {
        "tags": [
          "group-controller"
        ],
        "operationId": "isUserInGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/auth/{id}/email": {
      "patch": {
        "tags": [
          "auth-controller"
        ],
        "summary": "Used to ask update the user email. Returns a new jwt",
        "operationId": "updateEmail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "If the new email does not exist or is already in use",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "If the given password is not valid",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "If the email has been updated",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/users/update": {
      "patch": {
        "tags": [
          "user-controller"
        ],
        "summary": "Used to update the user information",
        "operationId": "updateUserInfo",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "If the user does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "User information have been updated"
          }
        }
      }
    },
    "/users/auth/jwtcheck": {
      "post": {
        "tags": [
          "auth-controller"
        ],
        "operationId": "checkJwt",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckJwtRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CheckJwtResponse"
                }
              }
            }
          }
        }
      }
    },
    "/profiles/profiles/{profile}/update": {
      "patch": {
        "tags": [
          "profile-controller"
        ],
        "summary": "Update a profile",
        "operationId": "updateProfile",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The profile is updated"
          },
          "422": {
            "description": "The answers are not valid"
          }
        }
      }
    },
    "/users/auth/validation/password": {
      "patch": {
        "tags": [
          "auth-controller"
        ],
        "summary": "Used to update the password with a confirmation code",
        "operationId": "validateCodePassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateCodePasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Invalid or expired confirmation code",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "The password has been updated",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/chat/channels/{group}": {
      "get": {
        "tags": [
          "channel-controller"
        ],
        "summary": "Get all the channels from a group",
        "operationId": "getGroupChannels",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "422": {
            "description": "The group does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChannelModel"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Return the list of channels of a group",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChannelModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "channel-controller"
        ],
        "summary": "Create a channel",
        "operationId": "createChannel",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChannelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Return the created channel",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelModel"
                }
              }
            }
          },
          "422": {
            "description": "The group id does not correspond to an existing group",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelModel"
                }
              }
            }
          }
        }
      }
    },
    "/users/auth/login": {
      "post": {
        "tags": [
          "auth-controller"
        ],
        "summary": "Log a user, to allow authenticated endpoints",
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed. Wrong username or password",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "Authentication Succeeded. Use the given jwt in following requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reports/reports/admin/{id}": {
      "get": {
        "tags": [
          "report-controller"
        ],
        "summary": "Get all the report of a user",
        "operationId": "getByReportedUserId",
        "parameters": [
          {
            "name": "roles",
            "in": "header",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/auth/register": {
      "post": {
        "tags": [
          "auth-controller"
        ],
        "summary": "Create a new account. Will send a confirmation mail to the given address",
        "operationId": "createAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "If the email is already in use by another user",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "User is created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/planning/groups/{groupId}/planning/{activityId}": {
      "delete": {
        "tags": [
          "planning-controller"
        ],
        "summary": "Delete the activity",
        "operationId": "deleteActivity",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "The activity or group does not exist"
          },
          "204": {
            "description": "Activity deleted"
          },
          "403": {
            "description": "User does not belong to the group"
          }
        }
      },
      "patch": {
        "tags": [
          "planning-controller"
        ],
        "summary": "Update the activity",
        "operationId": "updateActivity",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateActivityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "The activity or group does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityResponse"
                }
              }
            }
          },
          "200": {
            "description": "Activity updated. New activity is returned",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityResponse"
                }
              }
            }
          },
          "403": {
            "description": "User does not belong to the group",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/expenses/expenses/{groupId}/{expenseId}": {
      "delete": {
        "tags": [
          "expense-controller"
        ],
        "operationId": "deleteExpense",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "expenseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/chat/surveys/{id}": {
      "get": {
        "tags": [
          "survey-controller"
        ],
        "summary": "Get a survey by id",
        "operationId": "getSurveyById",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The data have been successfully retrieved",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SurveyModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "survey-controller"
        ],
        "summary": "Create a survey in a channel",
        "operationId": "createSurvey",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostSurveyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The survey has been created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SurveyModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "survey-controller"
        ],
        "summary": "Delete a survey in a channel",
        "operationId": "deleteSurvey",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The survey has been updated"
          }
        }
      },
      "patch": {
        "tags": [
          "survey-controller"
        ],
        "summary": "Update a survey in a channel",
        "operationId": "updateSurvey",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSurveyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The survey has been updated",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SurveyModel"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{id}/users/{userId}": {
      "get": {
        "tags": [
          "group-controller"
        ],
        "summary": "Get the information related to the member",
        "operationId": "getMember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "You are not allowed to view members of this group",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "User or group not found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "User information",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMemberModel"
                }
              }
            }
          }
        }
      }
    },
    "/expenses/expenses/{group}": {
      "get": {
        "tags": [
          "expense-controller"
        ],
        "operationId": "getExpensesByGroup",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExpenseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/planning/groups/{groupId}/planning/{activityId}/leave": {
      "patch": {
        "tags": [
          "planning-controller"
        ],
        "summary": "Remove the user from the given activity",
        "operationId": "leaveActivity",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User removed"
          },
          "404": {
            "description": "The activity or group does not exist"
          },
          "403": {
            "description": "User does not belong to the group"
          }
        }
      }
    },
    "/profiles/matchmaking": {
      "post": {
        "tags": [
          "match-making-controller"
        ],
        "summary": "Create a profile and start the matchmaking",
        "operationId": "match",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileCreationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Matchmaking started",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "match-making-controller"
        ],
        "summary": "Start the matchmaking with an existing profile",
        "operationId": "match_1",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "profile_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Profile or user not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingResponse"
                }
              }
            }
          },
          "202": {
            "description": "Matchmaking started",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/places/coordinates": {
      "post": {
        "tags": [
          "places-controller"
        ],
        "summary": "Retrieve 10 places around geographic coordinates",
        "operationId": "getPlacesFromCoordinates",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlacesFromCoordinatesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Return a list of places",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlaceResponse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Address not found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlaceResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profiles/profiles/{profile}": {
      "delete": {
        "tags": [
          "profile-controller"
        ],
        "summary": "Delete the profile of a user",
        "operationId": "deleteProfile",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "422": {
            "description": "No profile has been found"
          },
          "200": {
            "description": "The profile is deleted"
          }
        }
      }
    },
    "/expenses/expenses/{group}/user/{user}/debts/due": {
      "get": {
        "tags": [
          "expense-controller"
        ],
        "operationId": "getMoneyEachMemberOwesToUserInGroup",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "user",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MoneyDueResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reports/recommendations": {
      "post": {
        "tags": [
          "recommendation-controller"
        ],
        "summary": "Create a recommendation",
        "operationId": "submitRecommendation",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitRecommendationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The recommendation has been created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RecommendationResponse"
                }
              }
            }
          },
          "422": {
            "description": "The submitter or reviewed user do not exist",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RecommendationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/chat/chat/{channel_id}/pinned": {
      "get": {
        "tags": [
          "messaging-controller"
        ],
        "summary": "Get all pinned messages",
        "operationId": "getPinnedMessages",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "username",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/places/address": {
      "post": {
        "tags": [
          "places-controller"
        ],
        "summary": "Retrieve 10 places around an address",
        "operationId": "getPlacesFromAddress",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlacesFromAddressRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Return a list of places",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlaceResponse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Address not found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlaceResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/{id}/members": {
      "get": {
        "tags": [
          "group-controller"
        ],
        "operationId": "getMembers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profiles/profiles/active": {
      "get": {
        "tags": [
          "profile-controller"
        ],
        "operationId": "getActiveProfiles",
        "parameters": [
          {
            "name": "roles",
            "in": "header",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProfileModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profiles/matchmaking/{taskId}": {
      "get": {
        "tags": [
          "match-making-controller"
        ],
        "summary": "Get the state of a match making task",
        "operationId": "getResult",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "State",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingResult"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingResult"
                }
              }
            }
          }
        }
      }
    },
    "/planning/groups/{groupId}/planning": {
      "get": {
        "tags": [
          "planning-controller"
        ],
        "summary": "Get the group's activities",
        "operationId": "getActivities",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The group does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityResponse"
                  }
                }
              }
            }
          },
          "403": {
            "description": "User does not belong to the group",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "planning-controller"
        ],
        "summary": "Add a new activity to the group's planning",
        "operationId": "createActivity",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateActivityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Activity created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityResponse"
                }
              }
            }
          },
          "404": {
            "description": "The group does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityResponse"
                }
              }
            }
          },
          "403": {
            "description": "User does not belong to the group",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/users/{id}": {
      "get": {
        "tags": [
          "user-controller"
        ],
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "roles",
            "in": "header",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          }
        }
      }
    },
    "/chat/chat/{channel_id}": {
      "get": {
        "tags": [
          "messaging-controller"
        ],
        "summary": "Get the most recent channel's messages, by pages of size 50",
        "operationId": "getMessages",
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "username",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "206": {
            "description": "Partial Content",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/auth/google": {
      "post": {
        "tags": [
          "auth-controller"
        ],
        "summary": "Log a user, to allow authenticated endpoints",
        "operationId": "signInUpGoogle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GoogleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed. Wrong username or password",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "Authentication Succeeded. Use the given jwt in following requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GoogleAuthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/profiles/profiles": {
      "post": {
        "tags": [
          "profile-controller"
        ],
        "summary": "Create a profile",
        "operationId": "createProfile",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileCreationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the profile",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileModel"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileModel"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/memories": {
      "get": {
        "tags": [
          "group-controller"
        ],
        "summary": "Get all the memories from a group",
        "operationId": "getMemories",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Group does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "The memories are returned",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMemoriesResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "group-controller"
        ],
        "summary": "Add memory to a group",
        "operationId": "addMemory",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupMemoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Group or Memory does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "The memory is added to the group",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMemoriesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/private/{group}/join/": {
      "patch": {
        "tags": [
          "group-controller"
        ],
        "summary": "Accept the invitation to the group",
        "operationId": "joinGroupWithoutInvite",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JoinGroupWithoutInviteModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Group or User does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "The user has joined the group"
          }
        }
      }
    },
    "/expenses/expenses/{group}/user/{user}/debts": {
      "get": {
        "tags": [
          "expense-controller"
        ],
        "operationId": "getMoneyUserOwesToEachMemberInGroup",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "user",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MoneyDueResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/users/{id}/firebase": {
      "get": {
        "tags": [
          "user-controller"
        ],
        "summary": "Get the firebase token of this user",
        "operationId": "getFirebaseToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "The user does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "Firebase token returned. May be null",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FirebaseTokenResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "user-controller"
        ],
        "summary": "Update the firebase token associated to this user. If the token is not provided, it will be unset",
        "operationId": "setFirebaseToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "If the user does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "Firebase token updated"
          }
        }
      }
    },
    "/users/users/{id}/exists": {
      "get": {
        "tags": [
          "user-controller"
        ],
        "operationId": "exists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/private/{groupId}/public": {
      "patch": {
        "tags": [
          "group-controller"
        ],
        "summary": "Make a private group public",
        "operationId": "setGroupPublic",
        "parameters": [
          {
            "name": "username",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileCreationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "User is not in the group, or the group is already public",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Group does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "The group is now public"
          }
        }
      }
    },
    "/chat/surveys/quizz/{id}": {
      "get": {
        "tags": [
          "survey-controller"
        ],
        "summary": "Get all the surveys in a channel",
        "operationId": "getQuizz",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The data have been successfully retrieved",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SurveyModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chat/chat/{message_id}/pinned": {
      "patch": {
        "tags": [
          "messaging-controller"
        ],
        "summary": "Pin a message",
        "operationId": "pinMessage",
        "parameters": [
          {
            "name": "message_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pin",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/auth/{id}/confirmation": {
      "patch": {
        "tags": [
          "auth-controller"
        ],
        "summary": "Confirm a user's email",
        "operationId": "confirmUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmationCodeModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Invalid or expired confirmation code",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "User is now confirmed"
          }
        }
      }
    },
    "/groups/{id}/exists": {
      "get": {
        "tags": [
          "group-controller"
        ],
        "operationId": "exists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/auth/forgot/password": {
      "post": {
        "tags": [
          "auth-controller"
        ],
        "summary": "Used to receive a confirmation to update a password",
        "operationId": "forgotPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "If the user does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "Email is sent to reset password"
          }
        }
      }
    },
    "/users/auth/login/admin": {
      "post": {
        "tags": [
          "auth-controller"
        ],
        "summary": "Log a user, to allow authenticated endpoints",
        "operationId": "loginAdmin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed. Wrong username or password",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "Authentication Succeeded. Use the given jwt in following requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reports/reports/{id}/": {
      "delete": {
        "tags": [
          "report-controller"
        ],
        "summary": "Delete a report",
        "operationId": "deleteReport",
        "parameters": [
          {
            "name": "userId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "The report does not exist"
          },
          "200": {
            "description": "The report has been deleted"
          }
        }
      }
    },
    "/expenses/expenses/{group}/balances": {
      "get": {
        "tags": [
          "expense-controller"
        ],
        "operationId": "computeBalances",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BalanceResponse"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ForgotPasswordRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        }
      },
      "VoteModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "voter": {
            "type": "integer",
            "format": "int64"
          },
          "answer": {
            "$ref": "#/components/schemas/PossibleAnswerModel"
          }
        }
      },
      "GroupMemoriesResponse": {
        "type": "object",
        "properties": {
          "memories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreatePrivateGroupRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "maxSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PossibleAnswerRequest": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "rightAnswer": {
            "type": "boolean"
          }
        }
      },
      "GroupMemberModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "profilePicture": {
            "type": "string"
          }
        }
      },
      "MatchMakingResponse": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "integer",
            "format": "int64"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "ProfileCreationRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "duration": {
            "$ref": "#/components/schemas/RangeAnswerModel"
          },
          "budget": {
            "$ref": "#/components/schemas/RangeAnswerModel"
          },
          "destinationTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CITY",
                "COUNTRYSIDE",
                "BEACH",
                "MOUNTAIN",
                "NO_PREFERENCE"
              ]
            }
          },
          "ages": {
            "$ref": "#/components/schemas/RangeAnswerModel"
          },
          "travelWithPersonFromSameCity": {
            "type": "string",
            "enum": [
              "YES",
              "NO",
              "NO_PREFERENCE"
            ]
          },
          "travelWithPersonFromSameCountry": {
            "type": "string",
            "enum": [
              "YES",
              "NO",
              "NO_PREFERENCE"
            ]
          },
          "travelWithPersonSameLanguage": {
            "type": "string",
            "enum": [
              "YES",
              "NO",
              "NO_PREFERENCE"
            ]
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "MIXED"
            ]
          },
          "groupSize": {
            "$ref": "#/components/schemas/RangeAnswerModel"
          },
          "chillOrVisit": {
            "type": "string",
            "enum": [
              "CHILL",
              "VISIT",
              "NO_PREFERENCE"
            ]
          },
          "aboutFood": {
            "type": "string",
            "enum": [
              "COOKING",
              "RESTAURANT",
              "NO_PREFERENCE"
            ]
          },
          "goOutAtNight": {
            "type": "string",
            "enum": [
              "YES",
              "NO",
              "NO_PREFERENCE"
            ]
          },
          "sport": {
            "type": "string",
            "enum": [
              "YES",
              "NO",
              "NO_PREFERENCE"
            ]
          },
          "availabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailabilityAnswerModel"
            }
          }
        }
      },
      "SubmitRecommendationRequest": {
        "type": "object",
        "properties": {
          "reviewedUserId": {
            "type": "integer",
            "format": "int64"
          },
          "comment": {
            "type": "string"
          }
        }
      },
      "DebtDetailsResponse": {
        "type": "object",
        "properties": {
          "indebtedUser": {
            "type": "integer",
            "format": "int64"
          },
          "purchaser": {
            "type": "integer",
            "format": "int64"
          },
          "description": {
            "type": "string"
          },
          "amountToPay": {
            "type": "number",
            "format": "double"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ActivityResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "participants": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "color": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "infos": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AuthTokenResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "CreateActivityRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "participantsIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "color": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          }
        }
      },
      "DeleteUserRequest": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          }
        }
      },
      "JwtUserDetails": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdatePasswordRequest": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          }
        }
      },
      "GroupInfoModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupMemberModel"
            }
          },
          "maxSize": {
            "type": "integer",
            "format": "int32"
          },
          "state": {
            "type": "string",
            "enum": [
              "OPEN",
              "CLOSED",
              "ARCHIVED"
            ]
          },
          "picture": {
            "type": "string"
          }
        }
      },
      "PlacesFromCoordinatesRequest": {
        "type": "object",
        "properties": {
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ANTIQUES_SHOP",
                "ARTS_CENTER",
                "ART_SHOP",
                "BAR_AND_PUB",
                "BEACH",
                "BUS",
                "CHANGE",
                "CHINESE_RESTAURANT",
                "COFFEE_SHOP",
                "ENTERTAINMENT",
                "FAST_FOOD",
                "FISH_AND_CHIPS_RESTAURANT",
                "ITALIAN_RESTAURANT",
                "MUSEUM",
                "PARKING",
                "RESTAURANT",
                "SEAFOOD_RESTAURANT",
                "SUPERMARKET",
                "SWIMMING_POOL",
                "SUBWAY",
                "THEATRE",
                "TOURISM",
                "TRANSPORT"
              ]
            }
          },
          "radiusMeter": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CreatePublicGroupRequest": {
        "type": "object",
        "properties": {
          "user1": {
            "type": "integer",
            "format": "int64"
          },
          "user2": {
            "type": "integer",
            "format": "int64"
          },
          "profile1": {
            "type": "integer",
            "format": "int64"
          },
          "profile2": {
            "type": "integer",
            "format": "int64"
          },
          "maxSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ProfileModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "availabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailabilityAnswerModel"
            }
          },
          "duration": {
            "$ref": "#/components/schemas/RangeAnswerModel"
          },
          "budget": {
            "$ref": "#/components/schemas/RangeAnswerModel"
          },
          "destinationTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CITY",
                "COUNTRYSIDE",
                "BEACH",
                "MOUNTAIN",
                "NO_PREFERENCE"
              ]
            }
          },
          "ages": {
            "$ref": "#/components/schemas/RangeAnswerModel"
          },
          "travelWithPersonFromSameCity": {
            "type": "string",
            "enum": [
              "YES",
              "NO",
              "NO_PREFERENCE"
            ]
          },
          "travelWithPersonFromSameCountry": {
            "type": "string",
            "enum": [
              "YES",
              "NO",
              "NO_PREFERENCE"
            ]
          },
          "travelWithPersonSameLanguage": {
            "type": "string",
            "enum": [
              "YES",
              "NO",
              "NO_PREFERENCE"
            ]
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "MIXED"
            ]
          },
          "groupSize": {
            "$ref": "#/components/schemas/RangeAnswerModel"
          },
          "chillOrVisit": {
            "type": "string",
            "enum": [
              "CHILL",
              "VISIT",
              "NO_PREFERENCE"
            ]
          },
          "aboutFood": {
            "type": "string",
            "enum": [
              "COOKING",
              "RESTAURANT",
              "NO_PREFERENCE"
            ]
          },
          "goOutAtNight": {
            "type": "string",
            "enum": [
              "YES",
              "NO",
              "NO_PREFERENCE"
            ]
          },
          "sport": {
            "type": "string",
            "enum": [
              "YES",
              "NO",
              "NO_PREFERENCE"
            ]
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlacesFromAddressRequest": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ANTIQUES_SHOP",
                "ARTS_CENTER",
                "ART_SHOP",
                "BAR_AND_PUB",
                "BEACH",
                "BUS",
                "CHANGE",
                "CHINESE_RESTAURANT",
                "COFFEE_SHOP",
                "ENTERTAINMENT",
                "FAST_FOOD",
                "FISH_AND_CHIPS_RESTAURANT",
                "ITALIAN_RESTAURANT",
                "MUSEUM",
                "PARKING",
                "RESTAURANT",
                "SEAFOOD_RESTAURANT",
                "SUPERMARKET",
                "SWIMMING_POOL",
                "SUBWAY",
                "THEATRE",
                "TOURISM",
                "TRANSPORT"
              ]
            }
          },
          "radiusMeter": {
            "type": "integer",
            "format": "int32"
          },
          "address": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          }
        }
      },
      "GoogleRequest": {
        "type": "object",
        "properties": {
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "accessToken": {
            "type": "string"
          },
          "profilePicture": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "MessageResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "channelId": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "string"
          },
          "sentDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "pinned": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "TEXT",
              "IMAGE",
              "FILE",
              "SURVEY",
              "CALL"
            ]
          }
        }
      },
      "UpdateSurveyRequest": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string"
          },
          "possibleAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PossibleAnswerRequest"
            }
          },
          "multipleChoiceSurvey": {
            "type": "boolean"
          }
        }
      },
      "ScanResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "float"
            }
          },
          "total": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "ExpenseMemberModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "amountToPay": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "UpdatePrivateGroupRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "OPEN",
              "CLOSED",
              "ARCHIVED"
            ]
          },
          "ownerId": {
            "type": "integer",
            "format": "int64"
          },
          "maxSize": {
            "type": "integer",
            "format": "int32"
          },
          "startOfTrip": {
            "type": "string",
            "format": "date-time"
          },
          "endOfTrip": {
            "type": "string",
            "format": "date-time"
          },
          "picture": {
            "type": "string"
          },
          "destination": {
            "type": "string"
          }
        }
      },
      "CheckJwtResponse": {
        "type": "object",
        "properties": {
          "isValid": {
            "type": "boolean"
          },
          "userDetails": {
            "$ref": "#/components/schemas/JwtUserDetails"
          }
        }
      },
      "GoogleAuthResponse": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "newUser": {
            "type": "boolean"
          }
        }
      },
      "UpdateReportRequest": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "enum": [
              "REIMBURSEMENT_PROBLEM",
              "INNAPROPRIATE_BEHAVIOR",
              "HYGIENE_PROBLEM",
              "OTHER"
            ]
          },
          "details": {
            "type": "string"
          }
        }
      },
      "UserCreationRequest": {
        "type": "object",
        "properties": {
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time"
          },
          "phoneNumber": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "ConfirmationCodeModel": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        }
      },
      "PostSurveyRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "string"
          },
          "quizz": {
            "type": "boolean"
          },
          "possibleAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PossibleAnswerRequest"
            }
          },
          "isMultipleChoiceSurvey": {
            "type": "boolean",
            "writeOnly": true
          },
          "type": {
            "type": "string",
            "enum": [
              "TEXT",
              "IMAGE",
              "FILE",
              "SURVEY",
              "CALL"
            ]
          },
          "multipleChoiceSurvey": {
            "type": "boolean"
          }
        }
      },
      "PossibleAnswerModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "string"
          },
          "rightAnswer": {
            "type": "boolean"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "username": {
            "type": "string",
            "description": "Aka email"
          }
        }
      },
      "PlaceResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "street": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          }
        }
      },
      "CheckJwtRequest": {
        "type": "object",
        "properties": {
          "jwt": {
            "type": "string"
          }
        }
      },
      "MoneyDueResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "total": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "NotificationModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "firebaseId": {
            "type": "string"
          }
        }
      },
      "UserModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "NOT_SPECIFIED"
            ]
          },
          "profilePicture": {
            "type": "string"
          },
          "city": {
            "$ref": "#/components/schemas/CityModel"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "phoneNumber": {
            "type": "string"
          },
          "confirmed": {
            "type": "boolean"
          },
          "language": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "DEFAULT",
                "ADMIN"
              ]
            }
          }
        }
      },
      "ReportResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "reason": {
            "type": "string",
            "enum": [
              "REIMBURSEMENT_PROBLEM",
              "INNAPROPRIATE_BEHAVIOR",
              "HYGIENE_PROBLEM",
              "OTHER"
            ]
          },
          "details": {
            "type": "string"
          },
          "reportedUser": {
            "type": "integer",
            "format": "int64"
          },
          "submitter": {
            "type": "integer",
            "format": "int64"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "MatchMakingResult": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "CREATED",
              "JOINED",
              "WAITING",
              "SEARCHING"
            ]
          },
          "groupId": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "profileId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CityModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ValidateCodePasswordRequest": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "AvailabilityAnswerModel": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          }
        }
      },
      "UserUpdateRequest": {
        "type": "object",
        "properties": {
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "profilePicture": {
            "type": "string"
          },
          "city": {
            "$ref": "#/components/schemas/CityModel"
          },
          "phoneNumber": {
            "type": "string"
          },
          "birthdate": {
            "type": "string",
            "format": "date-time"
          },
          "gender": {
            "type": "string"
          },
          "language": {
            "type": "string"
          }
        }
      },
      "UpdateEmailRequest": {
        "type": "object",
        "properties": {
          "newEmail": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "RangeAnswerModel": {
        "type": "object",
        "properties": {
          "minValue": {
            "type": "integer",
            "format": "int32"
          },
          "maxValue": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UpdatePublicGroupRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "startOfTrip": {
            "type": "string",
            "format": "date-time"
          },
          "endOfTrip": {
            "type": "string",
            "format": "date-time"
          },
          "picture": {
            "type": "string"
          },
          "destination": {
            "type": "string"
          }
        }
      },
      "VoteSurveyRequest": {
        "type": "object",
        "properties": {
          "answerId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ModelWithEmail": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        }
      },
      "SubmitReportRequest": {
        "type": "object",
        "properties": {
          "reportedUserId": {
            "type": "integer",
            "format": "int64"
          },
          "reason": {
            "type": "string",
            "enum": [
              "REIMBURSEMENT_PROBLEM",
              "INNAPROPRIATE_BEHAVIOR",
              "HYGIENE_PROBLEM",
              "OTHER"
            ]
          },
          "details": {
            "type": "string"
          }
        }
      },
      "UserIdResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "UpdateChannelRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "index": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "BooleanResponse": {
        "type": "object",
        "properties": {
          "value": {
            "type": "boolean"
          }
        }
      },
      "GroupResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "OPEN",
              "CLOSED",
              "ARCHIVED"
            ]
          },
          "ownerId": {
            "type": "integer",
            "format": "int64"
          },
          "maxSize": {
            "type": "integer",
            "format": "int32"
          },
          "startOfTrip": {
            "type": "string",
            "format": "date-time"
          },
          "endOfTrip": {
            "type": "string",
            "format": "date-time"
          },
          "picture": {
            "type": "string"
          },
          "destination": {
            "type": "string"
          },
          "members": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "createdDate": {
            "type": "string"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "NOT_SPECIFIED"
            ]
          },
          "profilePicture": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "phoneNumber": {
            "type": "string"
          },
          "confirmed": {
            "type": "boolean"
          },
          "language": {
            "type": "string"
          }
        }
      },
      "MoneyDueRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "money": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ScanRequest": {
        "type": "object",
        "properties": {
          "minioUrl": {
            "type": "string"
          }
        }
      },
      "ChannelModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "index": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "BalanceResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "integer",
            "format": "int64"
          },
          "money": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "DeleteUserByAdminRequest": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string"
          }
        }
      },
      "SurveyModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "channelId": {
            "type": "integer",
            "format": "int64"
          },
          "question": {
            "type": "string"
          },
          "submitter": {
            "type": "integer",
            "format": "int64"
          },
          "quizz": {
            "type": "boolean"
          },
          "sendDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "possibleAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PossibleAnswerModel"
            }
          },
          "votes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoteModel"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "TEXT",
              "IMAGE",
              "FILE",
              "SURVEY",
              "CALL"
            ]
          },
          "multipleChoiceSurvey": {
            "type": "boolean"
          }
        }
      },
      "JoinGroupWithoutInviteModel": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "RecommendationResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "reviewer": {
            "type": "integer",
            "format": "int64"
          },
          "recommendedUser": {
            "type": "integer",
            "format": "int64"
          },
          "comment": {
            "type": "string"
          }
        }
      },
      "ProfileUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "availabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailabilityAnswerModel"
            }
          },
          "duration": {
            "$ref": "#/components/schemas/RangeAnswerModel"
          },
          "budget": {
            "$ref": "#/components/schemas/RangeAnswerModel"
          },
          "destinationTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CITY",
                "COUNTRYSIDE",
                "BEACH",
                "MOUNTAIN",
                "NO_PREFERENCE"
              ]
            }
          },
          "ages": {
            "$ref": "#/components/schemas/RangeAnswerModel"
          },
          "travelWithPersonFromSameCity": {
            "type": "string",
            "enum": [
              "YES",
              "NO",
              "NO_PREFERENCE"
            ]
          },
          "travelWithPersonFromSameCountry": {
            "type": "string",
            "enum": [
              "YES",
              "NO",
              "NO_PREFERENCE"
            ]
          },
          "travelWithPersonSameLanguage": {
            "type": "string",
            "enum": [
              "YES",
              "NO",
              "NO_PREFERENCE"
            ]
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "MIXED"
            ]
          },
          "groupSize": {
            "$ref": "#/components/schemas/RangeAnswerModel"
          },
          "chillOrVisit": {
            "type": "string",
            "enum": [
              "CHILL",
              "VISIT",
              "NO_PREFERENCE"
            ]
          },
          "aboutFood": {
            "type": "string",
            "enum": [
              "COOKING",
              "RESTAURANT",
              "NO_PREFERENCE"
            ]
          },
          "goOutAtNight": {
            "type": "string",
            "enum": [
              "YES",
              "NO",
              "NO_PREFERENCE"
            ]
          },
          "sport": {
            "type": "string",
            "enum": [
              "YES",
              "NO",
              "NO_PREFERENCE"
            ]
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "CreateChannelRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ExpenseRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "moneyDueByEachUser": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MoneyDueRequest"
            }
          },
          "icon": {
            "type": "string"
          },
          "evenlyDivided": {
            "type": "boolean"
          },
          "total": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "FirebaseTokenResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "ExpenseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "description": {
            "type": "string"
          },
          "total": {
            "type": "number",
            "format": "double"
          },
          "groupId": {
            "type": "integer",
            "format": "int64"
          },
          "purchaserId": {
            "type": "integer",
            "format": "int64"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "icon": {
            "type": "string"
          },
          "indebtedUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExpenseMemberModel"
            }
          }
        }
      },
      "UpdateActivityRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "color": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "infos": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "participants": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "GroupMemoryRequest": {
        "type": "object",
        "properties": {
          "memoryUrl": {
            "type": "string"
          }
        }
      }
    }
  }
}